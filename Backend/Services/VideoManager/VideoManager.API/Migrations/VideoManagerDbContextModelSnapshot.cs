// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using VideoManager.Infrastructure;

#nullable disable

namespace VideoManager.API.Migrations
{
    [DbContext(typeof(VideoManagerDbContext))]
    partial class VideoManagerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Infrastructure.EFCore.TransactionalEvents.Models.TransactionalEventData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("GroupId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("SequenceNumber")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("SequenceNumber");

                    b.ToTable("_TransactionalEvents", (string)null);
                });

            modelBuilder.Entity("Infrastructure.EFCore.TransactionalEvents.Models.TransactionalEventsGroup", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("AvailableDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("LastSequenceNumber")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AvailableDate");

                    b.HasIndex("CreateDate");

                    b.HasIndex("LastSequenceNumber");

                    b.ToTable("_TransactionalEventsGroup", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Idempotency.IdempotentOperation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("_IdempotentOperation", (string)null);
                });

            modelBuilder.Entity("VideoManager.Domain.Models.ProcessedVideo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("LengthSeconds")
                        .HasColumnType("integer");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("VideoFileId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("VideoId")
                        .HasColumnType("uuid");

                    b.Property<int>("Width")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("VideoId");

                    b.ToTable("ProcessedVideos");
                });

            modelBuilder.Entity("VideoManager.Domain.Models.UserProfile", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Handle")
                        .HasColumnType("text");

                    b.Property<long>("PrimaryVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint");

                    b.Property<string>("ThumbnailUrl")
                        .HasColumnType("text");

                    b.Property<long>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("VideoManager.Domain.Models.Video", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("AllowedToPublish")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("InfoVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint");

                    b.Property<Guid>("OriginalVideoFileId")
                        .HasColumnType("uuid");

                    b.Property<string>("OriginalVideoFileName")
                        .HasColumnType("text");

                    b.Property<string>("OriginalVideoUrl")
                        .HasColumnType("text");

                    b.Property<int>("ProcessingStatus")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("PublishDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("PublishStatusVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ThumbnailId")
                        .HasColumnType("uuid");

                    b.Property<int>("ThumbnailStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UnpublishDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint");

                    b.Property<int>("Visibility")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AllowedToPublish");

                    b.HasIndex("CreateDate");

                    b.HasIndex("CreatorId");

                    b.HasIndex("OriginalVideoFileId");

                    b.HasIndex("ProcessingStatus");

                    b.HasIndex("PublishDate");

                    b.HasIndex("Status");

                    b.HasIndex("ThumbnailStatus");

                    b.HasIndex("Visibility");

                    b.ToTable("Videos");
                });

            modelBuilder.Entity("VideoManager.Domain.Models.VideoThumbnail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<Guid>("ImageFileId")
                        .HasColumnType("uuid");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("VideoId")
                        .HasColumnType("uuid");

                    b.Property<int>("Width")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("VideoId");

                    b.ToTable("VideoThumbnails");
                });

            modelBuilder.Entity("Infrastructure.EFCore.TransactionalEvents.Models.TransactionalEventData", b =>
                {
                    b.HasOne("Infrastructure.EFCore.TransactionalEvents.Models.TransactionalEventsGroup", null)
                        .WithMany("TransactionalEvents")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Infrastructure.TransactionalEvents.TransactionalEvent", "Event", b1 =>
                        {
                            b1.Property<long>("TransactionalEventDataId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Category")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Category");

                            b1.Property<string>("Data")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Data");

                            b1.Property<string>("Type")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Type");

                            b1.HasKey("TransactionalEventDataId");

                            b1.HasIndex("Category");

                            b1.ToTable("_TransactionalEvents");

                            b1.WithOwner()
                                .HasForeignKey("TransactionalEventDataId");
                        });

                    b.Navigation("Event")
                        .IsRequired();
                });

            modelBuilder.Entity("VideoManager.Domain.Models.ProcessedVideo", b =>
                {
                    b.HasOne("VideoManager.Domain.Models.Video", null)
                        .WithMany("Videos")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VideoManager.Domain.Models.Video", b =>
                {
                    b.HasOne("VideoManager.Domain.Models.UserProfile", null)
                        .WithMany("Videos")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("VideoManager.Domain.Models.VideoMetrics", "Metrics", b1 =>
                        {
                            b1.Property<Guid>("VideoId")
                                .HasColumnType("uuid");

                            b1.Property<long>("CommentsCount")
                                .HasColumnType("bigint")
                                .HasColumnName("CommentsCount");

                            b1.Property<DateTimeOffset?>("CommentsCountUpdateDate")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("CommentsCountUpdateDate");

                            b1.Property<long>("DislikesCount")
                                .HasColumnType("bigint")
                                .HasColumnName("DislikesCount");

                            b1.Property<long>("LikesCount")
                                .HasColumnType("bigint")
                                .HasColumnName("LikesCount");

                            b1.Property<long>("ViewsCount")
                                .HasColumnType("bigint")
                                .HasColumnName("ViewsCount");

                            b1.Property<DateTimeOffset?>("ViewsCountUpdateDate")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("ViewsCountUpdateDate");

                            b1.Property<DateTimeOffset?>("VotesCountUpdateDate")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("VotesCountUpdateDate");

                            b1.HasKey("VideoId");

                            b1.HasIndex("CommentsCount");

                            b1.HasIndex("DislikesCount");

                            b1.HasIndex("LikesCount");

                            b1.HasIndex("ViewsCount");

                            b1.ToTable("Videos");

                            b1.WithOwner()
                                .HasForeignKey("VideoId");
                        });

                    b.OwnsOne("VideoManager.Domain.Models.VideoPreviewThumbnail", "PreviewThumbnail", b1 =>
                        {
                            b1.Property<Guid>("VideoId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Height")
                                .HasColumnType("integer")
                                .HasColumnName("PreviewThumbnailHeight");

                            b1.Property<Guid>("ImageFileId")
                                .HasColumnType("uuid")
                                .HasColumnName("PreviewThumbnailImageFileId");

                            b1.Property<float>("LengthSeconds")
                                .HasColumnType("real")
                                .HasColumnName("PreviewThumbnailLengthSeconds");

                            b1.Property<string>("Url")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("PreviewThumbnailLengthUrl");

                            b1.Property<int>("Width")
                                .HasColumnType("integer")
                                .HasColumnName("PreviewThumbnailWidth");

                            b1.HasKey("VideoId");

                            b1.ToTable("Videos");

                            b1.WithOwner()
                                .HasForeignKey("VideoId");
                        });

                    b.Navigation("Metrics")
                        .IsRequired();

                    b.Navigation("PreviewThumbnail");
                });

            modelBuilder.Entity("VideoManager.Domain.Models.VideoThumbnail", b =>
                {
                    b.HasOne("VideoManager.Domain.Models.Video", null)
                        .WithMany("Thumbnails")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Infrastructure.EFCore.TransactionalEvents.Models.TransactionalEventsGroup", b =>
                {
                    b.Navigation("TransactionalEvents");
                });

            modelBuilder.Entity("VideoManager.Domain.Models.UserProfile", b =>
                {
                    b.Navigation("Videos");
                });

            modelBuilder.Entity("VideoManager.Domain.Models.Video", b =>
                {
                    b.Navigation("Thumbnails");

                    b.Navigation("Videos");
                });
#pragma warning restore 612, 618
        }
    }
}
