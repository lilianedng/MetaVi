// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Storage.Infrastructure;

#nullable disable

namespace Storage.API.Migrations
{
    [DbContext(typeof(StorageDbContext))]
    [Migration("20230215140514_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence("file_property_seq")
                .IncrementsBy(10);

            modelBuilder.Entity("Infrastructure.EFCore.TransactionalEvents.Models.TransactionalEventData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("GroupId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("SequenceNumber")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("SequenceNumber");

                    b.ToTable("_TransactionalEvents", (string)null);
                });

            modelBuilder.Entity("Infrastructure.EFCore.TransactionalEvents.Models.TransactionalEventsGroup", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("AvailableDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("LastSequenceNumber")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AvailableDate");

                    b.HasIndex("CreateDate");

                    b.HasIndex("LastSequenceNumber");

                    b.ToTable("_TransactionalEventsGroup", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Idempotency.IdempotentOperation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("_IdempotentOperation", (string)null);
                });

            modelBuilder.Entity("Storage.Domain.Models.FileProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "file_property_seq");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("StoredFileFileId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("StoredFileFileId");

                    b.ToTable("FileProperty");
                });

            modelBuilder.Entity("Storage.Domain.Models.FileTracking", b =>
                {
                    b.Property<Guid>("TrackingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContentType")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uuid");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("RemovalDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RemovalRetryCount")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("integer");

                    b.HasKey("TrackingId");

                    b.HasIndex("CreateDate");

                    b.HasIndex("FileId");

                    b.HasIndex("GroupId");

                    b.HasIndex("RemovalDate");

                    b.HasIndex("Status");

                    b.ToTable("FileTrackings");
                });

            modelBuilder.Entity("Storage.Domain.Models.StoredFile", b =>
                {
                    b.Property<Guid>("FileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContentType")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TrackingId")
                        .HasColumnType("uuid");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("FileId");

                    b.HasIndex("Category");

                    b.HasIndex("ContentType");

                    b.HasIndex("CreateDate");

                    b.HasIndex("FileSize");

                    b.HasIndex("GroupId");

                    b.HasIndex("TrackingId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("Infrastructure.EFCore.TransactionalEvents.Models.TransactionalEventData", b =>
                {
                    b.HasOne("Infrastructure.EFCore.TransactionalEvents.Models.TransactionalEventsGroup", null)
                        .WithMany("TransactionalEvents")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Infrastructure.TransactionalEvents.TransactionalEvent", "Event", b1 =>
                        {
                            b1.Property<long>("TransactionalEventDataId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Category")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Category");

                            b1.Property<string>("Data")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Data");

                            b1.Property<string>("Type")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Type");

                            b1.HasKey("TransactionalEventDataId");

                            b1.HasIndex("Category");

                            b1.ToTable("_TransactionalEvents");

                            b1.WithOwner()
                                .HasForeignKey("TransactionalEventDataId");
                        });

                    b.Navigation("Event")
                        .IsRequired();
                });

            modelBuilder.Entity("Storage.Domain.Models.FileProperty", b =>
                {
                    b.HasOne("Storage.Domain.Models.StoredFile", null)
                        .WithMany("Properties")
                        .HasForeignKey("StoredFileFileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Infrastructure.EFCore.TransactionalEvents.Models.TransactionalEventsGroup", b =>
                {
                    b.Navigation("TransactionalEvents");
                });

            modelBuilder.Entity("Storage.Domain.Models.StoredFile", b =>
                {
                    b.Navigation("Properties");
                });
#pragma warning restore 612, 618
        }
    }
}
