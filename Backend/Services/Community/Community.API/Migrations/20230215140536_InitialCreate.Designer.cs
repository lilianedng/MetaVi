// <auto-generated />
using System;
using Community.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Community.API.Migrations
{
    [DbContext(typeof(CommunityDbContext))]
    [Migration("20230215140536_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Community.Domain.Models.UserProfile", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Handle")
                        .HasColumnType("text");

                    b.Property<long>("PrimaryVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint");

                    b.Property<string>("ThumbnailUrl")
                        .HasColumnType("text");

                    b.Property<long>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("Community.Domain.Models.VideoComment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DislikesCount")
                        .HasColumnType("integer");

                    b.Property<int>("LikesCount")
                        .HasColumnType("integer");

                    b.Property<long?>("ParentCommentId")
                        .HasColumnType("bigint");

                    b.Property<int>("RepliesCount")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("VideoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreateDate");

                    b.HasIndex("LikesCount");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("RepliesCount");

                    b.HasIndex("UserId");

                    b.HasIndex("VideoId", "ParentCommentId");

                    b.ToTable("VideoComments");
                });

            modelBuilder.Entity("Community.Domain.Models.VideoCommentVote", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<long>("VideoCommentId")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<long>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint");

                    b.Property<Guid>("VideoId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "VideoCommentId");

                    b.HasIndex("UserId");

                    b.HasIndex("VideoCommentId");

                    b.HasIndex("VideoId");

                    b.HasIndex("UserId", "VideoId");

                    b.ToTable("VideoCommentVotes");
                });

            modelBuilder.Entity("Community.Domain.Models.VideoForum", b =>
                {
                    b.Property<Guid>("VideoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("AllowedToComment")
                        .HasColumnType("boolean");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RootVideoCommentsCount")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("VideoCommentsCount")
                        .HasColumnType("integer");

                    b.HasKey("VideoId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("VideoCommentsCount");

                    b.ToTable("VideoForums");
                });

            modelBuilder.Entity("Infrastructure.EFCore.TransactionalEvents.Models.TransactionalEventData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("GroupId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("SequenceNumber")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("SequenceNumber");

                    b.ToTable("_TransactionalEvents", (string)null);
                });

            modelBuilder.Entity("Infrastructure.EFCore.TransactionalEvents.Models.TransactionalEventsGroup", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("AvailableDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("LastSequenceNumber")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AvailableDate");

                    b.HasIndex("CreateDate");

                    b.HasIndex("LastSequenceNumber");

                    b.ToTable("_TransactionalEventsGroup", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Idempotency.IdempotentOperation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("_IdempotentOperation", (string)null);
                });

            modelBuilder.Entity("Community.Domain.Models.VideoComment", b =>
                {
                    b.HasOne("Community.Domain.Models.VideoComment", "ParentComment")
                        .WithMany("Replies")
                        .HasForeignKey("ParentCommentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Community.Domain.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Community.Domain.Models.VideoForum", "VideoForum")
                        .WithMany("VideoComments")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentComment");

                    b.Navigation("UserProfile");

                    b.Navigation("VideoForum");
                });

            modelBuilder.Entity("Community.Domain.Models.VideoCommentVote", b =>
                {
                    b.HasOne("Community.Domain.Models.UserProfile", null)
                        .WithMany("VideoCommentVotes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Community.Domain.Models.VideoComment", null)
                        .WithMany("VideoCommentVotes")
                        .HasForeignKey("VideoCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Community.Domain.Models.VideoForum", null)
                        .WithMany("VideoCommentVotes")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Community.Domain.Models.VideoForum", b =>
                {
                    b.HasOne("Community.Domain.Models.UserProfile", "CreatorProfile")
                        .WithMany("VideoForums")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatorProfile");
                });

            modelBuilder.Entity("Infrastructure.EFCore.TransactionalEvents.Models.TransactionalEventData", b =>
                {
                    b.HasOne("Infrastructure.EFCore.TransactionalEvents.Models.TransactionalEventsGroup", null)
                        .WithMany("TransactionalEvents")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Infrastructure.TransactionalEvents.TransactionalEvent", "Event", b1 =>
                        {
                            b1.Property<long>("TransactionalEventDataId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Category")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Category");

                            b1.Property<string>("Data")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Data");

                            b1.Property<string>("Type")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Type");

                            b1.HasKey("TransactionalEventDataId");

                            b1.HasIndex("Category");

                            b1.ToTable("_TransactionalEvents");

                            b1.WithOwner()
                                .HasForeignKey("TransactionalEventDataId");
                        });

                    b.Navigation("Event")
                        .IsRequired();
                });

            modelBuilder.Entity("Community.Domain.Models.UserProfile", b =>
                {
                    b.Navigation("VideoCommentVotes");

                    b.Navigation("VideoForums");
                });

            modelBuilder.Entity("Community.Domain.Models.VideoComment", b =>
                {
                    b.Navigation("Replies");

                    b.Navigation("VideoCommentVotes");
                });

            modelBuilder.Entity("Community.Domain.Models.VideoForum", b =>
                {
                    b.Navigation("VideoCommentVotes");

                    b.Navigation("VideoComments");
                });

            modelBuilder.Entity("Infrastructure.EFCore.TransactionalEvents.Models.TransactionalEventsGroup", b =>
                {
                    b.Navigation("TransactionalEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
